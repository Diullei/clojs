/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,23],$V2=[1,25],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,19],$Va=[1,20],$Vb=[1,8],$Vc=[1,21],$Vd=[1,22],$Ve=[4,7,9,11,12,13,14,15,16,18,20,21,22,23,24,26,27,103],$Vf=[4,7,9,11,12,13,14,15,16,18,20,21,22,23,24,26,27,37,39,40,103],$Vg=[1,67],$Vh=[2,66],$Vi=[1,45],$Vj=[1,46],$Vk=[1,51],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,62],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,63],$VB=[1,44],$VC=[2,99],$VD=[4,7,9,11,12,13,14,15,16,18,21,22,24,26,27],$VE=[2,111],$VF=[2,94],$VG=[1,83],$VH=[2,107],$VI=[4,7,9,11,12,13,14,15,16,18,21,22,23,24,27],$VJ=[2,27],$VK=[4,18,20,24],$VL=[2,54],$VM=[20,37],$VN=[1,145],$VO=[1,146],$VP=[2,105],$VQ=[4,18,20,24,35,37],$VR=[4,7,9,11,12,13,14,15,16,18,20,21,22,24,27,35,37],$VS=[4,18,24,26,37,39,40],$VT=[1,173],$VU=[4,20],$VV=[2,2];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Identifier":3,"IDENTIFIER":4,"IdentifierList":5,"Keyword":6,"COLON":7,"AnonArg":8,"ANON_ARG":9,"Atom":10,"INTEGER":11,"FLOAT":12,"STRING":13,"true":14,"false":15,"nil":16,"CollectionLiteral":17,"[":18,"items":19,"]":20,"QUOTE":21,"(":22,")":23,"{":24,"SExprPairs[items]":25,"}":26,"SHARP":27,"Fn":28,"List":29,"AnonFnLiteral":30,"IdOrDestrucForm":31,"DestructuringForm":32,"IdOrDestrucList":33,"FnArgs":34,"&":35,"AsForm":36,"AS":37,"MapDestrucArgs":38,"KEYS":39,"STRS":40,"SExpr":41,"asForm":42,"FnArgsAndBody":43,"BlockStatementWithReturn":44,"FnDefinition":45,"FN":46,"DEFN":47,"CatchExpr":48,"CATCH":49,"body":50,"TryClauseExpr":51,"TRY":52,"SExprStmt[body]":53,"ConditionalExpr":54,"IF":55,"SExpr[test]":56,"SExprStmt[consequent]":57,"alternate":58,"IF_NOT":59,"WHEN":60,"BlockStatement[consequent]":61,"WHEN_NOT":62,"LogicalExpr":63,"AND":64,"exprs":65,"OR":66,"VarDeclaration":67,"DEF":68,"init":69,"LetBinding":70,"LetBindings":71,"LetForm":72,"LET":73,"DoForm":74,"SetForm":75,"SETVAL":76,"DOT":77,"IDENTIFIER[prop]":78,"SExpr[obj]":79,"SExpr[val]":80,"LoopForm":81,"LOOP":82,"BlockStatement":83,"RecurForm":84,"RECUR":85,"args":86,"DoTimesForm":87,"DOTIMES":88,"DoSeqForm":89,"DOSEQ":90,"WhileForm":91,"WHILE":92,"DotForm":93,"NewForm":94,"NEW":95,"Identifier[konstructor]":96,"DO":97,"SExprStmt":98,"SExprPairs":99,"SExprs":100,"NonEmptyDoForm":101,"Program":102,"END-OF-FILE":103,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",7:"COLON",9:"ANON_ARG",11:"INTEGER",12:"FLOAT",13:"STRING",14:"true",15:"false",16:"nil",18:"[",20:"]",21:"QUOTE",22:"(",23:")",24:"{",25:"SExprPairs[items]",26:"}",27:"SHARP",35:"&",37:"AS",39:"KEYS",40:"STRS",46:"FN",47:"DEFN",49:"CATCH",52:"TRY",53:"SExprStmt[body]",55:"IF",56:"SExpr[test]",57:"SExprStmt[consequent]",59:"IF_NOT",60:"WHEN",61:"BlockStatement[consequent]",62:"WHEN_NOT",64:"AND",66:"OR",68:"DEF",73:"LET",76:"SETVAL",77:"DOT",78:"IDENTIFIER[prop]",79:"SExpr[obj]",80:"SExpr[val]",82:"LOOP",85:"RECUR",88:"DOTIMES",90:"DOSEQ",92:"WHILE",95:"NEW",96:"Identifier[konstructor]",97:"DO",103:"END-OF-FILE"},
productions_: [0,[3,1],[5,0],[5,2],[6,2],[8,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[17,3],[17,4],[17,3],[17,4],[28,1],[28,1],[28,1],[28,3],[28,1],[28,1],[31,1],[31,1],[33,0],[33,2],[34,1],[34,3],[36,2],[38,0],[38,2],[38,5],[38,5],[38,3],[32,4],[32,3],[43,4],[45,2],[45,3],[30,4],[48,5],[51,3],[54,4],[54,4],[54,3],[54,3],[63,2],[63,2],[67,3],[70,2],[71,2],[71,0],[72,5],[75,3],[75,7],[81,5],[84,2],[87,6],[89,6],[91,3],[93,4],[94,3],[94,3],[29,0],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[29,2],[41,1],[41,1],[41,3],[41,1],[98,1],[99,0],[99,3],[100,1],[100,2],[101,1],[74,1],[74,0],[83,1],[44,1],[102,2],[102,1],[19,0],[19,1],[42,0],[42,1],[50,0],[50,1],[58,0],[58,1],[65,0],[65,1],[69,0],[69,1],[86,0],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = ($$[$0] === 'this')
            ? yy.Node('ThisExpression', yy.loc(_$[$0]))
            : yy.Node('Identifier', parseIdentifierName($$[$0]), yy.loc(_$[$0]));
    
break;
case 2: case 27: case 54: case 88:
 this.$ = []; 
break;
case 3: case 28: case 91:

        yy.locComb(this._$, _$[$0]);
        this.$ = $$[$0-1];
        $$[$0-1].push($$[$0]);
    
break;
case 4:
 this.$ = yy.Node('CallExpression', yy.Node('Identifier', 'keyword', yy.loc(this._$)), [yy.Node('Literal', $$[$0], yy.loc(this._$))], yy.loc(this._$)); 
break;
case 5:

        var name = $$[$0].slice(1);
        if (name === '') name = '1';
        if (name === '&') name = 'rest';
        var anonArgNum = (name === 'rest') ? 0 : Number(name);
        name = '__$' + name;
        this.$ = yy.Node('Identifier', name, yy.loc(_$[$0]));
        this.$.anonArg = true;
        this.$.anonArgNum = anonArgNum;
    
break;
case 6:
 this.$ = parseNumLiteral('Integer', $$[$0], yy.loc(_$[$0]), yy, yytext); 
break;
case 7:
 this.$ = parseNumLiteral('Float', $$[$0], yy.loc(_$[$0]), yy, yytext); 
break;
case 8:
 this.$ = parseLiteral('String', parseString($$[$0]), yy.loc(_$[$0]), yy.raw[yy.raw.length-1], yy); 
break;
case 9:
 this.$ = parseLiteral('Boolean', true, yy.loc(_$[$0]), yytext, yy); 
break;
case 10:
 this.$ = parseLiteral('Boolean', false, yy.loc(_$[$0]), yytext, yy); 
break;
case 11:
 this.$ = parseLiteral('Nil', null, yy.loc(_$[$0]), yytext, yy); 
break;
case 15:
 this.$ = parseCollectionLiteral('vector', getValueIfUndefined($$[$0-1], []), yy.loc(this._$), yy); 
break;
case 16:
 this.$ = parseCollectionLiteral('list', getValueIfUndefined($$[$0-1], []), yy.loc(this._$), yy); 
break;
case 17:
 this.$ = parseCollectionLiteral('hash-map', getValueIfUndefined($$[$0-1], []), yy.loc(this._$), yy); 
break;
case 18:
 this.$ = parseCollectionLiteral('hash-set', getValueIfUndefined($$[$0-1], []), yy.loc(this._$), yy); 
break;
case 22: case 85:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = { fixed: $$[$0], rest: null }; 
break;
case 30:

        if ($$[$0].keys && $$[$0].ids) {
            throw new Error('Rest args cannot be destructured by a hash map');
        }
        this.$ = { fixed: $$[$0-2], rest: $$[$0] };
    
break;
case 31: case 40: case 83: case 84:
 this.$ = $$[$0]; 
break;
case 32:
 this.$ = { keys: [], ids: [] }; 
break;
case 33:

        $$[$0-1].destrucId = $$[$0];
        this.$ = $$[$0-1];
    
break;
case 34:

        var id;
        for (var i = 0, len = $$[$0-1].length; i < len; ++i) {
            id = $$[$0-1][i];
            $$[$0-4].ids.push(id);
            $$[$0-4].keys.push(yy.Node('CallExpression',
                yy.Node('Identifier', 'keyword', id.loc),
                [yy.Node('Literal', id.name, id.loc)], id.loc));
        }
        this.$ = $$[$0-4];
    
break;
case 35:

        var id;
        for (var i = 0, len = $$[$0-1].length; i < len; ++i) {
            id = $$[$0-1][i];
            $$[$0-4].ids.push(id);
            $$[$0-4].keys.push(yy.Node('Literal', id.name, id.loc));
        }
        this.$ = $$[$0-4];
    
break;
case 36:

        $$[$0-2].ids.push($$[$0-1]);
        $$[$0-2].keys.push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 37:

        this.$ = $$[$0-2];
        this.$.destrucId = getValueIfUndefined($$[$0-1], yy.Node('Identifier', null, yy.loc(_$[$0-3])));
    
break;
case 38:

        this.$ = $$[$0-1];
        this.$.destrucId = getValueIfUndefined(this.$.destrucId, yy.Node('Identifier', null, yy.loc(_$[$0-2])));
    
break;
case 39:

        var processed = processSeqDestrucForm($$[$0-2], yy);
        var ids = processed.ids;
        $$[$0].body = processed.stmts.concat($$[$0].body);

        var hasRecurForm = processRecurFormIfAny($$[$0], ids, yy);
        if (hasRecurForm) {
            var blockLoc = $$[$0].loc;
            $$[$0] = yy.Node('BlockStatement', [
                yy.Node('WhileStatement', yy.Node('Literal', true, blockLoc),
                    $$[$0], blockLoc)], blockLoc);
        }

        var arityCheck = createArityCheckStmt(ids.length, $$[$0-2].rest, yy.loc(_$[$0-2]), yy);
        $$[$0].body.unshift(arityCheck);

        this.$ = yy.Node('FunctionExpression', null, ids, null,
            $$[$0], false, false, yy.loc(_$[$0]));
    
break;
case 41:
 this.$ = parseVarDecl($$[$0-1], $$[$0], yy.loc(_$[$0-2]), yy); 
break;
case 42:

        var body = $$[$0-1], bodyLoc = _$[$0-1];
        var maxArgNum = 0;
        var hasRestArg = false;
        estraverse.traverse(body, {
            enter: function (node) {
                if (node.type === 'Identifier' && node.anonArg) {
                    if (node.anonArgNum === 0)   // 0 denotes rest arg
                        hasRestArg = true;
                    else if (node.anonArgNum > maxArgNum)
                        maxArgNum = node.anonArgNum;
                    delete node.anonArg;
                    delete node.anonArgNum;
                }
            }
        });
        var args = [];
        for (var i = 1; i <= maxArgNum; ++i) {
            args.push(yy.Node('Identifier', '__$' + i, yy.loc(_$[$0-1])));
        }
        body = wrapInExpressionStatement(body, yy);
        body = yy.Node('BlockStatement', [body], yy.loc(bodyLoc));
        createReturnStatementIfPossible(body, yy);
        if (hasRestArg) {
            var restId = yy.Node('Identifier', '__$rest', yy.loc(bodyLoc));
            var restDecl = createRestArgsDecl(restId, null, maxArgNum, yy.loc(bodyLoc), yy);
            body.body.unshift(restDecl);
        }

        var arityCheck = createArityCheckStmt(maxArgNum, hasRestArg, yy.loc(_$[$0-3]), yy);
        body.body.unshift(arityCheck);

        this.$ = yy.Node('FunctionExpression', null, args, null, body,
            false, false, yy.loc(_$[$0-3]));
    
break;
case 43:

        var yyloc = yy.loc(_$[$0-4])
        var nilNode = parseLiteral('Nil', null, yy.loc(_$[$0-4]), null, yy);
        var catchBody = yy.Node('ExpressionStatement', nilNode, nilNode.loc);
        this.$ = yy.Node('CatchClause', $$[$0-2], null, yy.Node('BlockStatement', [getValueIfUndefined($$[$0-1], catchBody)], yyloc), yyloc);
    
break;
case 44:

        this.$ = yy.Node('TryStatement', yy.Node('BlockStatement', [$$[$0-1]], yy.loc(_$[$0-2])), [$$[$0]], null, yy.loc(_$[$0-2]));
    
break;
case 45:

        this.$ = yy.Node('IfStatement', $$[$0-2], $$[$0-1], getValueIfUndefined($$[$0], null), yy.loc(_$[$0-3]));
        // for code like ((if true +) 1 2 3)
        if (this.$.consequent.type === 'ExpressionStatement' &&
            (this.$.alternate === null || this.$.alternate.type === 'ExpressionStatement')) {
            this.$.type = 'ConditionalExpression';
            this.$.consequent = this.$.consequent.expression;
            if (this.$.alternate === null)
                this.$.alternate = yy.Node('Literal', null, yy.loc(_$[$0-3]));
            else
                this.$.alternate = this.$.alternate.expression;
        }
    
break;
case 46:

        this.$ = yy.Node('IfStatement', $$[$0-2], $$[$0-1], getValueIfUndefined($$[$0], null), yy.loc(_$[$0-3]));
        // for code like ((if-not true +) 1 2 3)
        if (this.$.consequent.type === 'ExpressionStatement' &&
            (this.$.alternate === null || this.$.alternate.type === 'ExpressionStatement')) {
            this.$.type = 'ConditionalExpression';
            var testLoc = yy.loc(_$[$0-2]);
            this.$.test = yy.Node('CallExpression', yy.Node('Identifier', 'not', testLoc),
                [this.$.test], testLoc);
            this.$.consequent = this.$.consequent.expression;
            if (this.$.alternate === null)
                this.$.alternate = yy.Node('Literal', null, yy.loc(_$[$0-3]));
            else
                this.$.alternate = this.$.alternate.expression;
        }
    
break;
case 47:

        this.$ = yy.Node('IfStatement', $$[$0-1], $$[$0], null, yy.loc(_$[$0-2]));
    
break;
case 48:

        this.$ = yy.Node('IfStatement', $$[$0-1], $$[$0], null, yy.loc(_$[$0-2]));
        var testLoc = yy.loc(_$[$0-1]);
        this.$.test = yy.Node('CallExpression', yy.Node('Identifier', 'not', testLoc),
            [this.$.test], testLoc);
    
break;
case 49:

        $$[$0] = getValueIfUndefined($$[$0], [yy.Node('Literal', true, yy.loc(_$[$0-1]))]);
        this.$ = parseLogicalExpr('&&', $$[$0], yy.loc(_$[$0-1]), yy);
    
break;
case 50:

        $$[$0] = getValueIfUndefined($$[$0], [yy.Node('Literal', null, yy.loc(_$[$0-1]))]);
        this.$ = parseLogicalExpr('||', $$[$0], yy.loc(_$[$0-1]), yy);
    
break;
case 51:

      //this.$ = parseVarDecl($$[$0-1], $$[$0], yy.loc(this._$), yy);
      this.$ = yy.Node('AssignmentExpression', '=', $$[$0-1], $$[$0], yy.loc(_$[$0-2]));
    
break;
case 52:

        var processed = processDestrucForm({ fixed: [$$[$0-1]], rest: null }, yy);
        this.$ = {
            decl: yy.Node('VariableDeclarator', processed.ids[0], getValueIfUndefined($$[$0], null), yy.loc(_$[$0-1])),
            stmts: processed.stmts
        };
    
break;
case 53:

        var decl = yy.Node('VariableDeclaration', 'var', [$$[$0].decl], yy.loc(_$[$0]));
        $$[$0-1].push({ decl: decl, stmts: $$[$0].stmts });
        this.$ = $$[$0-1];
    
break;
case 55:

        var body = [], i, len, letBinding;
        for (i = 0, len = $$[$0-2].length; i < len; ++i) {
            letBinding = $$[$0-2][i];
            body = body.concat([letBinding.decl]).concat(letBinding.stmts);
        }
        body = body.concat($$[$0]);
        this.$ = wrapInIIFE(body, yy.loc(_$[$0-4]), yy);
    
break;
case 56:
 this.$ = yy.Node('AssignmentExpression', '=', $$[$0-1], $$[$0], yy.loc(_$[$0-2])); 
break;
case 57:

        var lhs = yy.Node('MemberExpression', $$[$0-2],
            yy.Node('Identifier', $$[$0-3], yy.loc(_$[$0-3])),
            false, yy.loc(_$[$0-4]));
        this.$ = yy.Node('AssignmentExpression', '=', lhs, $$[$0], yy.loc(_$[$0-6]));
    
break;
case 58:

        var body = [], i, len, letBinding;

        // unwrap IIFEs in loop body, sacrificing strict scoping rules for correct behaviour
        // I wish there was a cleaner solution
        // see https://github.com/vickychijwani/closer.js/issues/2
        estraverse.replace($$[$0], {
            leave: function (node) {
                var exp = node.argument || node.expression;  // ReturnStatement or ExpressionStatement
                if (exp && exp.iife === true) {
                    return unwrapIIFE(exp);
                }
                return node;
            }
        });

        for (i = 0, len = $$[$0-2].length; i < len; ++i) {
            letBinding = $$[$0-2][i];
            body.push(letBinding.decl);
            $$[$0].body = letBinding.stmts.concat($$[$0].body);
        }

        body.push($$[$0]);
        this.$ = wrapInIIFE(body, yy.loc(_$[$0-4]), yy);

        var blockBody = this.$.callee.object.body.body, whileBlock, whileBlockIdx, stmt;
        for (var i = 0, len = blockBody.length; i < len; ++i) {
            stmt = blockBody[i];
            if (stmt.type === 'BlockStatement') {
                whileBlockIdx = i;
                whileBlock = stmt;
            }
        }

        var actualArgs = [];
        for (var i = 0, len = $$[$0-2].length; i < len; ++i) {
            actualArgs.push($$[$0-2][i].decl.declarations[0].id);
        }

        processRecurFormIfAny(whileBlock, actualArgs, yy);

        var whileBody = whileBlock.body;
        var lastLoc = (whileBody.length > 0) ? (whileBody[whileBody.length-1].loc) : whileBlock.loc;
        whileBody.push(yy.Node('BreakStatement', null, lastLoc));
        blockBody[whileBlockIdx] = yy.Node('WhileStatement', yy.Node('Literal', true, yy.loc(_$[$0])),
            whileBlock, yy.loc(_$[$0]));
    
break;
case 59:

        $$[$0] = getValueIfUndefined($$[$0], []);
        var body = [], id, assignment, arg;
        for (var i = 0; i < $$[$0].length; ++i) {
            arg = $$[$0][i];
            id = yy.Node('Identifier', '__$recur' + i, arg.loc);
            id.recurArg = true;
            id.recurArgIdx = i;
            assignment = yy.Node('AssignmentExpression', '=', id, arg, arg.loc);
            body.push(wrapInExpressionStatement(assignment, yy));
        }
        this.$ = yy.Node('BlockStatement', body, yy.loc(_$[$0-1]));
        this.$.recurBlock = true;
    
break;
case 60:

        var init = parseVarDecl($$[$0-3],
            parseNumLiteral('Integer', '0', yy.loc(_$[$0-3]), yy),
            yy.loc(_$[$0-3]), yy);
        var maxId = yy.Node('Identifier', '__$max' + dotimesIdx++, yy.loc(_$[$0-2]));
        addVarDecl(init, maxId, $$[$0-2], yy.loc(_$[$0-2]), yy);
        var test = yy.Node('BinaryExpression', '<', $$[$0-3], maxId, yy.loc(_$[$0-3]));
        var update = yy.Node('UpdateExpression', '++', $$[$0-3], true, yy.loc(_$[$0-3]));
        var forLoop = yy.Node('ForStatement', init, test, update, $$[$0], yy.loc(_$[$0-5]));
        this.$ = wrapInIIFE([forLoop], yy.loc(_$[$0-5]), yy);
    
break;
case 61:

        var idLoc = yy.loc(_$[$0-3]), sexprLoc = yy.loc(_$[$0-2]);
        var seqId = yy.Node('Identifier', '__$doseqSeq' + doseqIdx++, sexprLoc);
        var init = parseVarDecl(seqId, $$[$0-2], sexprLoc, yy);
        addVarDecl(init, $$[$0-3],
            yy.Node('CallExpression', yy.Node('Identifier', 'first', idLoc),
                [seqId], idLoc), idLoc, yy);
        var test = yy.Node('BinaryExpression', '!==', $$[$0-3],
            yy.Node('Literal', null, idLoc), idLoc);
        var seqUpdate = yy.Node('AssignmentExpression', '=', seqId,
            yy.Node('CallExpression', yy.Node('Identifier', 'rest', sexprLoc),
                [seqId], sexprLoc), sexprLoc);
        var idUpdate = yy.Node('AssignmentExpression', '=', $$[$0-3],
            yy.Node('CallExpression', yy.Node('Identifier', 'first', idLoc),
                [seqId], idLoc), idLoc);
        var update = yy.Node('SequenceExpression', [seqUpdate, idUpdate], idLoc);
        var forLoop = yy.Node('ForStatement', init, test, update, $$[$0], yy.loc(_$[$0-5]));
        this.$ = wrapInIIFE([forLoop], yy.loc(_$[$0-5]), yy);
    
break;
case 62:

        var whileLoop = yy.Node('WhileStatement', $$[$0-1], $$[$0], yy.loc(_$[$0-2]));
        this.$ = whileLoop;
    
break;
case 63:

        $$[$0] = getValueIfUndefined($$[$0], []);
        var callee = yy.Node('MemberExpression', $$[$0-1],
            yy.Node('Literal', $$[$0-2], yy.loc(_$[$0-2])),
            true, yy.loc(this._$));
        var fnCall = yy.Node('CallExpression', callee, $$[$0], yy.loc(this._$));
        if ($$[$0].length > 0) {
            this.$ = fnCall;
        } else {
            // (.prop obj) can either be a call to a 0-argument fn, or a property access.
            // if both are possible, the function call is chosen. This is as per Clojure.
            // see http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form
            // (typeof obj['prop'] === 'function' && obj['prop'].length === 0) ? obj['prop']() : obj['prop'];
            this.$ = yy.Node('ConditionalExpression',
                yy.Node('LogicalExpression', '&&',
                    yy.Node('BinaryExpression', '===',
                        yy.Node('UnaryExpression', 'typeof', callee, true, yy.loc(this._$)),
                        yy.Node('Literal', 'function', yy.loc(this._$)), yy.loc(this._$)),
                    yy.Node('BinaryExpression', '===',
                        yy.Node('MemberExpression', callee,
                            yy.Node('Identifier', 'length', yy.loc(this._$)),
                            false, yy.loc(this._$)),
                        yy.Node('Literal', 0, yy.loc(this._$)), yy.loc(this._$)),
                    yy.loc(this._$)),
                fnCall, callee, yy.loc(this._$));
        }
    
break;
case 64:

        this.$ = yy.Node('NewExpression', $$[$0-1], getValueIfUndefined($$[$0], []), yy.loc(_$[$0-2]));
    
break;
case 65:

        this.$ = yy.Node('NewExpression', $$[$0-2], getValueIfUndefined($$[$0], []), yy.loc(_$[$0-2]));
    
break;
case 66:
 this.$ = yy.Node('EmptyStatement', yy.loc(_$[$0])); 
break;
case 81:

        yy.locComb(this._$, _$[$0]);
        var callee = yy.Node('MemberExpression', $$[$0-1],
            yy.Node('Identifier', 'call', yy.loc(_$[$0-1])),
            false, yy.loc(_$[$0-1]));
        $$[$0] = getValueIfUndefined($$[$0], []);
        $$[$0].unshift(yy.Node('ThisExpression', yy.loc(_$[$0-1])));
        this.$ = yy.Node('CallExpression', callee, $$[$0], yy.loc(this._$));
    
break;
case 82:
 this.$ = wrapInIIFE($$[$0], yy.loc(_$[$0-1]), yy); 
break;
case 87:
 this.$ = wrapInExpressionStatement($$[$0], yy); 
break;
case 89:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1], $$[$0]); 
break;
case 90:
 this.$ = [$$[$0]]; 
break;
case 92:

        for (var i = 0, len = $$[$0].length; i < len; ++i) {
            $$[$0][i] = wrapInExpressionStatement($$[$0][i], yy);
        }
    
break;
case 94:

        // do forms evaluate to nil if the body is empty
        nilNode = parseLiteral('Nil', null, yy.loc(_$[$0]), yytext, yy);
        this.$ = [yy.Node('ExpressionStatement', nilNode, nilNode.loc)];
    
break;
case 95:

        this.$ = yy.Node('BlockStatement', $$[$0], yy.loc(_$[$0]));
    
break;
case 96:

        this.$ = createReturnStatementIfPossible($$[$0], yy);
    
break;
case 97:

        var prog = yy.Node('Program', $$[$0-1], yy.loc(_$[$0-1]));
        resetGeneratedIds();
        processLocsAndRanges(prog, yy.locs, yy.ranges);
        deleteExtraProperties(prog);
        return prog;
    
break;
case 98:

        var prog = yy.Node('Program', [], {
            end: { column: 0, line: 0 },
            start: { column: 0, line: 0 },
            range: [0, 0]
        });
        resetGeneratedIds();
        processLocsAndRanges(prog, yy.locs, yy.ranges);
        return prog;
    
break;
}
},
table: [{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:5,100:4,101:2,102:1,103:[1,3]},{1:[3]},{103:[1,26]},{1:[2,98]},o([23,103],[2,92],{10:6,17:7,30:9,6:16,3:17,8:18,41:27,4:$V0,7:$V1,9:$V2,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd}),o($Ve,[2,90]),o($Vf,[2,83]),o($Vf,[2,84]),{3:64,4:$V0,6:66,7:$V1,8:69,9:$V2,17:65,18:$V9,21:$Va,22:$Vg,23:$Vh,24:$Vc,27:$Vd,28:43,29:28,30:68,45:29,46:$Vi,47:$Vj,51:31,52:$Vk,54:30,55:$Vl,59:$Vm,60:$Vn,62:$Vo,63:32,64:$Vp,66:$Vq,67:33,68:$Vr,72:34,73:$Vs,75:35,76:$Vt,77:$Vu,81:36,82:$Vv,84:37,85:$Vw,87:38,88:$Vx,89:39,90:$Vy,91:40,92:$Vz,93:41,94:42,95:$VA,97:$VB},o($Vf,[2,86]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,19:70,20:$VC,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:5,100:71},{22:[1,72]},o($VD,[2,88],{99:73}),{22:[1,75],24:[1,74]},{4:[1,76]},o([4,7,9,11,12,13,14,15,16,18,20,21,22,23,24,26,27,35,37,39,40,77,103],[2,1]),o($Vf,[2,5]),{1:[2,97]},o($Ve,[2,91]),{23:[1,77]},{23:[2,67]},{23:[2,68]},{23:[2,69]},{23:[2,70]},{23:[2,71]},{23:[2,72]},{23:[2,73]},{23:[2,74]},{23:[2,75]},{23:[2,76]},{23:[2,77]},{23:[2,78]},{23:[2,79]},{23:[2,80]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VE,24:$Vc,27:$Vd,30:9,41:5,86:78,100:79},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:80,100:4,101:81},{18:$VG,43:82},{3:84,4:$V0},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:85},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:86},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:87},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:88},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:90,98:89},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VH,24:$Vc,27:$Vd,30:9,41:5,65:91,100:92},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VH,24:$Vc,27:$Vd,30:9,41:5,65:93,100:92},{3:94,4:$V0},{18:[1,95]},{3:96,4:$V0,22:[1,97]},{18:[1,98]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VE,24:$Vc,27:$Vd,30:9,41:5,86:99,100:79},{18:[1,100]},{18:[1,101]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:102},{4:[1,103]},{3:104,4:$V0},o($VI,[2,19],{77:[1,105]}),o($VI,[2,20]),o($VI,[2,21]),{3:64,4:$V0,6:66,7:$V1,8:69,9:$V2,17:65,18:$V9,21:$Va,22:$Vg,23:$Vh,24:$Vc,27:$Vd,28:43,29:106,30:68,45:29,46:$Vi,47:$Vj,51:31,52:$Vk,54:30,55:$Vl,59:$Vm,60:$Vn,62:$Vo,63:32,64:$Vp,66:$Vq,67:33,68:$Vr,72:34,73:$Vs,75:35,76:$Vt,77:$Vu,81:36,82:$Vv,84:37,85:$Vw,87:38,88:$Vx,89:39,90:$Vy,91:40,92:$Vz,93:41,94:42,95:$VA,97:$VB},o($VI,[2,23]),o($VI,[2,24]),{20:[1,107]},o([20,23,26],[2,100],{10:6,17:7,30:9,6:16,3:17,8:18,41:27,4:$V0,7:$V1,9:$V2,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd}),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,19:108,21:$Va,22:$Vb,23:$VC,24:$Vc,27:$Vd,30:9,41:5,100:71},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,26:[1,109],27:$Vd,30:9,41:110},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,19:111,21:$Va,22:$Vb,24:$Vc,26:$VC,27:$Vd,30:9,41:5,100:71},{3:64,4:$V0,6:66,7:$V1,8:69,9:$V2,17:65,18:$V9,21:$Va,22:$Vg,23:$Vh,24:$Vc,27:$Vd,28:43,29:112,30:68,45:29,46:$Vi,47:$Vj,51:31,52:$Vk,54:30,55:$Vl,59:$Vm,60:$Vn,62:$Vo,63:32,64:$Vp,66:$Vq,67:33,68:$Vr,72:34,73:$Vs,75:35,76:$Vt,77:$Vu,81:36,82:$Vv,84:37,85:$Vw,87:38,88:$Vx,89:39,90:$Vy,91:40,92:$Vz,93:41,94:42,95:$VA,97:$VB},o($Vf,[2,4]),o($Vf,[2,85]),{23:[2,81]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:[2,112],24:$Vc,27:$Vd,30:9,41:27},{23:[2,82]},{23:[2,93]},{23:[2,40]},o([4,18,20,24,35],$VJ,{34:113,33:114}),{18:$VG,43:115},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:90,98:116},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:90,98:117},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:118,100:4,101:81},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:120,100:4,101:81},{22:[1,122],48:121},o($VI,[2,87]),{23:[2,49]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:[2,108],24:$Vc,27:$Vd,30:9,41:27},{23:[2,50]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:[2,109],24:$Vc,27:$Vd,30:9,41:124,69:123},o($VK,$VL,{71:125}),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:126},{77:[1,127]},o($VK,$VL,{71:128}),{23:[2,59]},{3:129,4:$V0},{3:130,4:$V0},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:131,100:4,101:81},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:132},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VE,24:$Vc,27:$Vd,30:9,41:5,86:133,100:79},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VE,24:$Vc,27:$Vd,30:9,41:5,86:134,100:79},{23:[1,135]},o($Vf,[2,15]),{23:[1,136]},o($Vf,[2,17]),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:137},{26:[1,138]},{23:[1,139]},{20:[1,140]},o($VM,[2,29],{31:142,3:143,32:144,4:$V0,18:$VN,24:$VO,35:[1,141]}),{23:[2,41]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VP,24:$Vc,27:$Vd,30:9,41:90,58:147,98:148},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VP,24:$Vc,27:$Vd,30:9,41:90,58:149,98:148},{23:[2,47]},{23:[2,95]},{23:[2,48]},{23:[2,44]},{49:[1,150]},{23:[2,51]},{23:[2,110]},{3:143,4:$V0,18:$VN,20:[1,151],24:$VO,31:153,32:144,70:152},{23:[2,56]},{4:[1,154]},{3:143,4:$V0,18:$VN,20:[1,155],24:$VO,31:153,32:144,70:152},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:156},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:157},{23:[2,62]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VE,24:$Vc,27:$Vd,30:9,41:5,86:158,100:79},{23:[2,64]},{23:[2,65]},o($VI,[2,22]),o($Vf,[2,16]),o($VD,[2,89]),o($Vf,[2,18]),o($Vf,[2,42]),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,44:159,74:119,83:160,100:4,101:81},{3:143,4:$V0,18:$VN,24:$VO,31:161,32:144},o($VQ,[2,28]),o($VR,[2,25]),o($VR,[2,26]),o($VQ,$VJ,{33:114,34:162}),o($VS,[2,32],{38:163}),{23:[2,45]},{23:[2,106]},{23:[2,46]},{3:164,4:$V0},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:165,100:4,101:81},o($VK,[2,53]),{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:166},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:167},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:168,100:4,101:81},{20:[1,169]},{20:[1,170]},{23:[2,63]},{23:[2,39]},{23:[2,96]},o($VM,[2,30]),{20:[2,101],36:172,37:$VT,42:171},{3:143,4:$V0,18:$VN,24:$VO,26:[1,174],31:178,32:144,36:175,37:$VT,39:[1,176],40:[1,177]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:[2,103],24:$Vc,27:$Vd,30:9,41:90,50:179,98:180},{23:[2,55]},o($VK,[2,52]),{23:[1,181]},{23:[2,58]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:182,100:4,101:81},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,23:$VF,24:$Vc,27:$Vd,30:9,41:5,74:119,83:183,100:4,101:81},{20:[1,184]},{20:[2,102]},{3:185,4:$V0},o($VR,[2,38]),o($VS,[2,33]),{18:[1,186]},{18:[1,187]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:188},{23:[1,189]},{23:[2,104]},{3:17,4:$V0,6:16,7:$V1,8:18,9:$V2,10:6,11:$V3,12:$V4,13:$V5,14:$V6,15:$V7,16:$V8,17:7,18:$V9,21:$Va,22:$Vb,24:$Vc,27:$Vd,30:9,41:190},{23:[2,60]},{23:[2,61]},o($VR,[2,37]),o([4,18,20,24,26,37,39,40],[2,31]),o($VU,$VV,{5:191}),o($VU,$VV,{5:192}),o($VS,[2,36]),{23:[2,43]},{23:[2,57]},{3:194,4:$V0,20:[1,193]},{3:194,4:$V0,20:[1,195]},o($VS,[2,34]),o($VU,[2,3]),o($VS,[2,35])],
defaultActions: {3:[2,98],26:[2,97],29:[2,67],30:[2,68],31:[2,69],32:[2,70],33:[2,71],34:[2,72],35:[2,73],36:[2,74],37:[2,75],38:[2,76],39:[2,77],40:[2,78],41:[2,79],42:[2,80],78:[2,81],80:[2,82],81:[2,93],82:[2,40],91:[2,49],93:[2,50],99:[2,59],115:[2,41],118:[2,47],119:[2,95],120:[2,48],121:[2,44],123:[2,51],124:[2,110],126:[2,56],131:[2,62],133:[2,64],134:[2,65],147:[2,45],148:[2,106],149:[2,46],158:[2,63],159:[2,39],160:[2,96],165:[2,55],168:[2,58],172:[2,102],180:[2,104],182:[2,60],183:[2,61],189:[2,43],190:[2,57]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var estraverse = require('estraverse');

var expressionTypes = ['ThisExpression', 'ArrayExpression', 'ObjectExpression',
    'FunctionExpression', 'ArrowExpression', 'SequenceExpression', 'Identifier',
    'UnaryExpression', 'BinaryExpression', 'AssignmentExpression', 'Literal',
    'UpdateExpression', 'LogicalExpression', 'ConditionalExpression',
    'NewExpression', 'CallExpression', 'MemberExpression'/*, 'TryClauseExpression'*/];

// indices for generated identifiers
var destrucArgIdx, doseqIdx, dotimesIdx;
resetGeneratedIds();
function resetGeneratedIds() {
    destrucArgIdx = doseqIdx = dotimesIdx = 0;
}

function processSeqDestrucForm(args, yy) {
    var i, len, arg;
    var fixed = args.fixed, rest = args.rest;
    var ids = [], stmts = [];
    for (i = 0, len = fixed.length; i < len; ++i) {
        arg = fixed[i];
        if (arg.type && arg.type === 'Identifier') {
            ids.push(arg);
        } else if (! arg.type) {
            arg.destrucId.name = arg.destrucId.name || '__$destruc' + destrucArgIdx++;
            ids.push(arg.destrucId);
            stmts = processChildDestrucForm(arg, stmts, yy);
        }
    }

    if (rest) {
        if (rest.type && rest.type === 'Identifier') {
            decl = createRestArgsDecl(rest, args.destrucId, fixed.length, rest.loc, yy);
            stmts.push(decl);
        } else if (! rest.type) {
            rest.destrucId.name = rest.destrucId.name || '__$destruc' + destrucArgIdx++;
            decl = createRestArgsDecl(rest.destrucId, args.destrucId, fixed.length, rest.destrucId.loc, yy);
            stmts.push(decl);
            stmts = processChildDestrucForm(rest, stmts, yy);
        }
    }

    return { ids: ids, pairs: [], stmts: stmts };
}

function processMapDestrucForm(args, yy) {
    var keys = args.keys, valIds = args.ids, key, id;
    var pairs = [], stmts = [];
    var decl, init, yyloc;
    for (var i = 0, len = valIds.length; i < len; ++i) {
        id = valIds[i], key = keys[i];
        if (id.type && id.type === 'Identifier') {
            yyloc = id.loc;
            init = yy.Node('CallExpression',
                yy.Node('Identifier', 'get', yyloc),
                [args.destrucId, key], yyloc);
            decl = parseVarDecl(id, init, yyloc, yy);
            stmts.push(decl);
        } else if (! id.type) {
            id.destrucId.name = id.destrucId.name || '__$destruc' + destrucArgIdx++;
            pairs.push({ id: id.destrucId, key: key });
            stmts = processChildDestrucForm(id, stmts, yy);
        }
    }
    return { ids: [], pairs: pairs, stmts: stmts };
}

function processDestrucForm(args, yy) {
    if (args.fixed !== undefined && args.rest !== undefined) {
        return processSeqDestrucForm(args, yy);
    } else if (args.keys !== undefined && args.ids !== undefined) {
        return processMapDestrucForm(args, yy);
    }
}

function processChildDestrucForm(arg, stmts, yy) {
    var i, len, processed = processDestrucForm(arg, yy);
    var processedId, processedKey, yyloc, init, decl, nilDecl, tryStmt, catchClause, errorId;
    for (i = 0, len = processed.ids.length; i < len; ++i) {
        processedId = processed.ids[i];
        yyloc = processedId.loc;
        init = yy.Node('CallExpression',
            yy.Node('Identifier', 'nth', yyloc),
            [arg.destrucId, yy.Node('Literal', i, yyloc)],
            yyloc);

        decl = parseVarDecl(processedId, init, processedId.loc, yy);
        nilDecl = parseVarDecl(processedId, yy.Node('Literal', null, yyloc), processedId.loc, yy);

        errorId = yy.Node('Identifier', '__$error', yyloc);
        catchClause = yy.Node('CatchClause', errorId, null,
            yy.Node('BlockStatement', [
                yy.Node('IfStatement',
                    yy.Node('BinaryExpression', '!==',
                        yy.Node('MemberExpression', errorId,
                            yy.Node('Identifier', 'name', yyloc), false, yyloc),
                        yy.Node('Literal', 'IndexOutOfBoundsError', yyloc),
                        yyloc),
                    yy.Node('ThrowStatement', errorId, yyloc),
                    null, yyloc),
                wrapInExpressionStatement(
                    yy.Node('AssignmentExpression', '=', processedId,
                        yy.Node('Literal', null, yyloc), yyloc),
                    yy)],
                yyloc),
            yyloc);

        tryStmt = yy.Node('TryStatement',
            yy.Node('BlockStatement', [decl], yyloc),
            [catchClause], null, yyloc);

        stmts.push(tryStmt);
    }
    for (i = 0, len = processed.pairs.length; i < len; ++i) {
        processedId = processed.pairs[i].id, processedKey = processed.pairs[i].key;
        yyloc = processedId.loc;
        init = yy.Node('CallExpression',
            yy.Node('Identifier', 'get', yyloc),
            [arg.destrucId, processedKey], yyloc);
        decl = parseVarDecl(processedId, init, yyloc, yy);
        stmts.push(decl);
    }
    return stmts.concat(processed.stmts);
}

function processRecurFormIfAny(rootNode, actualArgs, yy) {
    var hasRecurForm = false;
    estraverse.traverse(rootNode, {
        enter: function (node) {
            if (node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration') {
                return estraverse.VisitorOption.Skip;
            } else if (node.type === 'BlockStatement' && node.recurBlock) {
                hasRecurForm = true;
                var body = node.body;

                // get rid of return statement
                var lastStmt = body.length > 0 ? body[body.length-1] : null;
                if (lastStmt && lastStmt.type === 'ReturnStatement') {
                    lastStmt.type = 'ExpressionStatement';
                    lastStmt.expression = lastStmt.argument;
                    delete lastStmt.argument;
                }

                estraverse.traverse(node, {
                    enter: function (innerNode) {
                        if (innerNode.type === 'Identifier' && innerNode.recurArg) {
                            var actualArg = actualArgs[innerNode.recurArgIdx];
                            body.push(wrapInExpressionStatement(yy.Node('AssignmentExpression', '=', actualArg, innerNode, innerNode.loc), yy));
                            delete innerNode.recurArg;
                            delete innerNode.recurArgIdx;
                        }
                    }
                });

                var lastLoc = (body.length > 0) ? (body[body.length-1].loc) : body.loc;
                body.push(yy.Node('ContinueStatement', null, lastLoc));
                delete node.recurBlock;
            }
        }
    });
    return hasRecurForm;
}

// wrap the given array of statements in an IIFE (Immediately-Invoked Function Expression)
function wrapInIIFE(body, yyloc, yy) {
    var iife = yy.Node('CallExpression',
        yy.Node('MemberExpression',
            yy.Node('FunctionExpression',
                null, [], null,
                createReturnStatementIfPossible(yy.Node('BlockStatement', body, yyloc), yy),
                false, false, yyloc),
            yy.Node('Identifier', 'call', yyloc), false, yyloc),
        [yy.Node('ThisExpression', yyloc)],
        yyloc);
    iife.iife = true;  // must delete this marker property before returning parser output
    return iife;
}

// unwrap IIFE and return a BlockStatement
function unwrapIIFE(node) {
    return (node.iife === true) ? node.callee.object.body : node;
}

function deleteExtraProperties(prog) {
    estraverse.traverse(prog, {
        enter: function (node) {
            if (node.iife !== undefined) {
                delete node.iife;
            }
        }
    });
}

function wrapInExpressionStatement(expr, yy) {
    if (expressionTypes.indexOf(expr.type) !== -1) {
        return yy.Node('ExpressionStatement', expr, expr.loc);
    }
    return expr;
}

function createArityCheckStmt(minArity, hasRestArgs, yyloc, yy) {
    var arityCheckArgs = [yy.Node('Literal', minArity, yyloc)];
    if (hasRestArgs) {
        arityCheckArgs.push(yy.Node('Identifier', 'Infinity', yyloc));
    }
    arityCheckArgs.push(yy.Node('MemberExpression',
        yy.Node('Identifier', 'arguments', yyloc),
        yy.Node('Identifier', 'length', yyloc), false, yyloc));
    var arityCheck = yy.Node('CallExpression',
        yy.Node('MemberExpression',
            yy.Node('Identifier', 'assertions', yyloc),
            yy.Node('Identifier', 'arity', yyloc),
            false, yyloc),
        arityCheckArgs, yyloc);
    return wrapInExpressionStatement(arityCheck, yy);
}

function createReturnStatementIfPossible(stmt, yy) {
    if (stmt === undefined || stmt === null || ! stmt.type)
        return stmt;
    var lastStmts = [], lastStmt;
    if (stmt.type === 'BlockStatement') {
        lastStmts.push(stmt.body[stmt.body.length - 1]);
    } else if (stmt.type === 'IfStatement') {
        lastStmts.push(stmt.consequent);
        if (stmt.alternate === null) {
            stmt.alternate = wrapInExpressionStatement(yy.Node('Literal', null, stmt.consequent.loc), yy);
        }
        lastStmts.push(stmt.alternate);
    } else {
        return stmt;
    }
    for (var i = 0; i < lastStmts.length; ++i) {
        lastStmt = lastStmts[i];
        if (! lastStmt) continue;
        if (lastStmt.type === 'ExpressionStatement') {
            lastStmt.type = 'ReturnStatement';
            lastStmt.argument = lastStmt.expression;
            delete lastStmt.expression;
        } else {
            createReturnStatementIfPossible(lastStmt, yy);
        }
    }
    return stmt;
}

function createRestArgsDecl(id, argsId, offset, yyloc, yy) {
    var restInit;
    if (! argsId) {
        restInit = yy.Node('CallExpression', yy.Node('Identifier', 'seq', yyloc),
            [yy.Node('CallExpression',
                yy.Node('MemberExpression',
                    yy.Node('MemberExpression',
                        yy.Node('MemberExpression',
                            yy.Node('Identifier', 'Array', yyloc),
                            yy.Node('Identifier', 'prototype', yyloc), false, yyloc),
                        yy.Node('Identifier', 'slice', yyloc), false, yyloc),
                    yy.Node('Identifier', 'call', yyloc), false, yyloc),
                [yy.Node('Identifier', 'arguments', yyloc),
                 yy.Node('Literal', offset, yyloc)])],
            yyloc);
    } else {
        restInit = yy.Node('CallExpression', yy.Node('Identifier', 'drop', yyloc),
            [yy.Node('Literal', offset, yyloc), argsId]);
    }
    return parseVarDecl(id, restInit, yyloc, yy);
}

function parseLogicalExpr(op, exprs, yyloc, yy) {
    var logicalExpr = exprs[0];
    for (var i = 1, len = exprs.length; i < len; ++i) {
        logicalExpr = yy.Node('LogicalExpression', op, logicalExpr, exprs[i], yyloc);
    }
    return logicalExpr;
}

function parseVarDecl(id, init, yyloc, yy) {
    var stmt = yy.Node('VariableDeclaration', 'var', [], yyloc);
    return addVarDecl(stmt, id, init, yyloc, yy);
}

function addVarDecl(stmt, id, init, yyloc, yy) {
    var decl = yy.Node('VariableDeclarator', id, getValueIfUndefined(init, null), yyloc);
    stmt.declarations.push(decl);
    return stmt;
}

function parseNumLiteral(type, token, yyloc, yy, yytext) {
    var node;
    if (token[0] === '-') {
        node = parseLiteral(type, -Number(token), yyloc, yytext, yy);
        node = yy.Node('UnaryExpression', '-', node, true, yyloc);
    } else {
        node = parseLiteral(type, Number(token), yyloc, yytext, yy);
    }
    return node;
}

function parseLiteral(type, value, yyloc, raw, yy) {
    return yy.Node('Literal', value, yyloc, raw);
}

function parseCollectionLiteral(type, items, yyloc, yy) {
    return yy.Node('CallExpression', yy.Node('Identifier', parseIdentifierName(type), yyloc), items, yyloc);
}

var charMap = {
    '-': '_$_',
    '+': '_$PLUS_',
    '>': '_$GT_',
    '<': '_$LT_',
    '=': '_$EQ_',
    '!': '_$BANG_',
    '*': '_$STAR_',
    '/': '_$SLASH_',
    '?': '_$QMARK_'
};

// list of reserved words (current and future) in ES6
var reservedWords = ['await', 'break', 'case', 'class', 'catch', 'const', 'continue',
    'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends',
    'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof',
    'interface', 'let', 'new', 'package', 'private', 'protected', 'public',
    'return', 'static', 'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var',
    'void', 'while', 'with', 'yield'];

function parseIdentifierName(name) {
    var charsToReplace = new RegExp('[' + Object.keys(charMap).join('') + ']', 'g');
    if (reservedWords.indexOf(name) !== -1) {
        // convert identifiers that are reserved words in JS to something safer
        return '__$' + name;
    }
    return name.replace(charsToReplace, function (c) { return charMap[c]; });
}

function parseString(str) {
    return str
        .replace(/\\(u[a-fA-F0-9]{4}|x[a-fA-F0-9]{2})/g, function (match, hex) {
            return String.fromCharCode(parseInt(hex.slice(1), 16));
        })
        .replace(/\\([0-3]?[0-7]{1,2})/g, function (match, oct) {
            return String.fromCharCode(parseInt(oct, 8));
        })
        .replace(/\\0[^0-9]?/g,'\u0000')
        .replace(/\\(?:\r\n?|\n)/g,'')
        .replace(/\\n/g,'\n')
        .replace(/\\r/g,'\r')
        .replace(/\\t/g,'\t')
        .replace(/\\v/g,'\v')
        .replace(/\\f/g,'\f')
        .replace(/\\b/g,'\b')
        .replace(/\\(.)/g, '$1');
}

function processLocsAndRanges(prog, locs, ranges) {
    // this cannot be done 1 pass over all the nodes
    // because some of the loc / range objects point to the same instance in memory
    // so deleting one deletes the other as well
    estraverse.replace(prog, {
        leave: function (node) {
            if (ranges) node.range = node.loc.range || [0, 0];
            return node;
        }
    });

    estraverse.replace(prog, {
        leave: function (node) {
            if (node.loc && typeof node.loc.range !== 'undefined')
                delete node.loc.range;
            if (! locs && typeof node.loc !== 'undefined')
                delete node.loc;
            return node;
        }
    });
}

function getValueIfUndefined(variable, valueIfUndefined) {
    return (typeof variable === 'undefined') ? valueIfUndefined : variable;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* whitespace */;
break;
case 1: /* ignore */ 
break;
case 2:
    this.begin('INITIAL');
    return 11;

break;
case 3:
    this.begin('INITIAL');
    return 12;

break;
case 4:
    this.begin('INITIAL');
    yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);
    return 13;

break;
case 5:
    this.begin('INITIAL');
    return 9;

break;
case 6: this.begin('INITIAL'); return 35; 
break;
case 7: this.begin('fnpos'); return 22; 
break;
case 8: this.begin('INITIAL'); return 23; 
break;
case 9: this.begin('INITIAL'); return 18; 
break;
case 10: this.begin('INITIAL'); return 20; 
break;
case 11: this.begin('INITIAL'); return 24; 
break;
case 12: this.begin('INITIAL'); return 26; 
break;
case 13: this.begin('INITIAL'); return 27; 
break;
case 14: this.begin('INITIAL'); return 21; 
break;
case 15: this.begin('INITIAL'); return 7; 
break;
case 16: this.begin('INITIAL'); return 77; 
break;
case 17: this.begin('INITIAL'); return 68; 
break;
case 18: this.begin('INITIAL'); return 46; 
break;
case 19: this.begin('INITIAL'); return 47; 
break;
case 20: this.begin('INITIAL'); return 55; 
break;
case 21: this.begin('INITIAL'); return 59; 
break;
case 22: this.begin('INITIAL'); return 60; 
break;
case 23: this.begin('INITIAL'); return 62; 
break;
case 24: this.begin('INITIAL'); return 97; 
break;
case 25: this.begin('INITIAL'); return 73; 
break;
case 26: this.begin('INITIAL'); return 82; 
break;
case 27: this.begin('INITIAL'); return 85; 
break;
case 28: this.begin('INITIAL'); return 64; 
break;
case 29: this.begin('INITIAL'); return 66; 
break;
case 30: this.begin('INITIAL'); return 76; 
break;
case 31: this.begin('INITIAL'); return 88; 
break;
case 32: this.begin('INITIAL'); return 90; 
break;
case 33: this.begin('INITIAL'); return 92; 
break;
case 34: this.begin('INITIAL'); return 95; 
break;
case 35: this.begin('INITIAL'); return 52; 
break;
case 36: this.begin('INITIAL'); return 49; 
break;
case 37: this.begin('INITIAL'); return 37; 
break;
case 38: this.begin('INITIAL'); return 39; 
break;
case 39: this.begin('INITIAL'); return 40; 
break;
case 40: this.begin('INITIAL'); return 14; 
break;
case 41: this.begin('INITIAL'); return 15; 
break;
case 42: this.begin('INITIAL'); return 16; 
break;
case 43:
    this.begin('INITIAL');
    return 4;

break;
case 44:return 'ILLEGAL-TOKEN';
break;
case 45: return 103; 
break;
case 46:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:([\s,]+))/,/^(?:(;[^\r\n]*))/,/^(?:([-+]?([1-9][0-9]+|[0-9])))/,/^(?:([-+]?[0-9]+((\.[0-9]*[eE][-+]?[0-9]+)|(\.[0-9]*)|([eE][-+]?[0-9]+))))/,/^(?:("([^\"\\]|\\[\'\"\\bfnrt])*"))/,/^(?:(%(&|[1-9]|[0-9]|)?))/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:#)/,/^(?:')/,/^(?::)/,/^(?:\.)/,/^(?:def)/,/^(?:fn)/,/^(?:defn)/,/^(?:if)/,/^(?:if-not)/,/^(?:when)/,/^(?:when-not)/,/^(?:do)/,/^(?:let)/,/^(?:loop)/,/^(?:recur)/,/^(?:and)/,/^(?:or)/,/^(?:set!)/,/^(?:dotimes)/,/^(?:doseq)/,/^(?:while)/,/^(?:new)/,/^(?:try)/,/^(?:catch)/,/^(?::as)/,/^(?::keys)/,/^(?::strs)/,/^(?:true)/,/^(?:false)/,/^(?:nil)/,/^(?:([a-zA-Z*+!\-_=<>?\/][0-9a-zA-Z*+!\-_=<>?\/]*))/,/^(?:.)/,/^(?:$)/,/^(?:.)/],
conditions: {"regex":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,37,38,39,40,41,42,43,44,45,46],"inclusive":true},"fnpos":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}