[4mRunning "coffeelint:app" (coffeelint) task[24m
[32m>> [39m11 files lint free.

[4mRunning "shell:jison" (shell) task[24m

[4mRunning "coffee:built" (coffee) task[24m

[4mRunning "coffee:specs" (coffee) task[24m

[4mRunning "shell:cljs_build" (shell) task[24m

[4mRunning "jasmine_test" task[24m
null
null
null

Closer core library[33m - 2839 ms[0m

    (+ x y & more)[33m - 57 ms[0m
[32m        adds the given numbers[0m[34m - 56 ms[0m

    (- x y & more)[33m - 11 ms[0m
[32m        subtracts all but the first number from the first one[0m[34m - 11 ms[0m

    (* x y & more)[33m - 10 ms[0m
[32m        multiplies the given numbers[0m[34m - 10 ms[0m

    (/ x y & more)[33m - 18 ms[0m
[32m        divides the first number by the rest[0m[34m - 18 ms[0m

    (inc x)[33m - 11 ms[0m
[32m        increments x by 1[0m[34m - 11 ms[0m

    (dec x)[33m - 4 ms[0m
[32m        decrements x by 1[0m[34m - 4 ms[0m

    (max x y & more)[33m - 7 ms[0m
[32m        finds the maximum of the given numbers[0m[34m - 7 ms[0m

    (min x y & more)[33m - 2 ms[0m
[32m        finds the minimum of the given numbers[0m[34m - 2 ms[0m

    (quot num div)[33m - 19 ms[0m
[32m        computes the quotient of dividing num by div[0m[34m - 19 ms[0m

    (rem num div)[33m - 8 ms[0m
[32m        computes the remainder of dividing num by div (same as % in other languages)[0m[34m - 8 ms[0m

    (mod num div)[33m - 21 ms[0m
[32m        computes the modulus of num and div (NOT the same as % in other languages)[0m[34m - 21 ms[0m

    (rand), (rand n)[33m - 43 ms[0m
[32m        returns a random floating-point number between 0 (inclusive) and n (default 1) (exclusive)[0m[34m - 43 ms[0m

    (rand-int n)[33m - 351 ms[0m
[32m        returns a random integer between 0 (inclusive) and n (exclusive)[0m[34m - 349 ms[0m

    (= x y & more)[33m - 68 ms[0m
[32m        returns true if all its arguments are equal (by value, not identity)[0m[34m - 68 ms[0m

    (not= x y & more)[33m - 71 ms[0m
[32m        returns true if some of its arguments are unequal (by value, not identity)[0m[34m - 71 ms[0m

    (== x y & more)[33m - 3 ms[0m
[32m        returns true if all its arguments are numeric and equal[0m[34m - 3 ms[0m

    (< x y & more)[33m - 10 ms[0m
[32m        returns true if its arguments are in monotonically increasing order[0m[34m - 10 ms[0m

    (> x y & more)[33m - 6 ms[0m
[32m        returns true if its arguments are in monotonically decreasing order[0m[34m - 6 ms[0m

    (<= x y & more)[33m - 5 ms[0m
[32m        returns true if its arguments are in monotonically non-decreasing order[0m[34m - 5 ms[0m

    (>= x y & more)[33m - 5 ms[0m
[32m        returns true if its arguments are in monotonically non-increasing order[0m[34m - 5 ms[0m

    (identical? x y)[33m - 15 ms[0m
[32m        returns true if x and y are the same object[0m[34m - 15 ms[0m

    (true? x)[33m - 6 ms[0m
[32m        returns true if and only if x is the value true[0m[34m - 6 ms[0m

    (false? x)[33m - 3 ms[0m
[32m        returns true if and only if x is the value false[0m[34m - 3 ms[0m

    (nil? x)[33m - 4 ms[0m
[32m        returns true if and only if x is the value nil[0m[34m - 4 ms[0m

    (some? x)[33m - 11 ms[0m
[32m        returns true if and only if x is NOT the value nil[0m[34m - 11 ms[0m

    (number? x)[33m - 8 ms[0m
[32m        returns true if and only if x is a number[0m[34m - 8 ms[0m

    (integer? x)[33m - 13 ms[0m
[32m        returns true if and only if x is an integer[0m[34m - 13 ms[0m

    (float? x)[33m - 2 ms[0m
[32m        returns true if and only if x is a floating-point number[0m[34m - 2 ms[0m

    (zero? x)[33m - 9 ms[0m
[32m        returns true if and only if x is numerically 0[0m[34m - 9 ms[0m

    (pos? x)[33m - 263 ms[0m
[32m        returns true if and only if x is a number > 0[0m[34m - 262 ms[0m

    (neg? x)[33m - 5 ms[0m
[32m        returns true if and only if x is a number < 0[0m[34m - 4 ms[0m

    (even? x)[33m - 2 ms[0m
[32m        returns true if and only if x is an even integer[0m[34m - 2 ms[0m

    (odd? x)[33m - 3 ms[0m
[32m        returns true if and only if x is an odd integer[0m[34m - 3 ms[0m

    (contains? coll key)[33m - 12 ms[0m
[32m        returns true if the collection contains the given key[0m[34m - 12 ms[0m

    (empty? coll)[33m - 5 ms[0m
[32m        returns true if coll has no items - same as (not (seq coll))[0m[34m - 5 ms[0m

    (keyword? x)[33m - 2 ms[0m
[32m        returns true if x is a keyword[0m[34m - 2 ms[0m

    (list? x)[33m - 2 ms[0m
[32m        returns true if x is a list[0m[34m - 2 ms[0m

    (seq? x)[33m - 3 ms[0m
[32m        returns true if x is a seq[0m[34m - 3 ms[0m

    (vector? x)[33m - 5 ms[0m
[32m        returns true if x is a vector[0m[34m - 5 ms[0m

    (map? x)[33m - 2 ms[0m
[32m        returns true if x is a map[0m[34m - 2 ms[0m

    (set? x)[33m - 4 ms[0m
[32m        returns true if x is a set[0m[34m - 4 ms[0m

    (coll? x)[33m - 5 ms[0m
[32m        returns true if x is a collection[0m[34m - 5 ms[0m

    (sequential? coll)[33m - 5 ms[0m
[32m        returns true if coll is a sequential collection[0m[34m - 5 ms[0m

    (associative? coll)[33m - 16 ms[0m
[32m        returns true if coll is an associative collection[0m[34m - 16 ms[0m

    (counted? coll)[33m - 9 ms[0m
[32m        returns true if coll can be counted in constant time[0m[34m - 9 ms[0m

    (seqable? coll)[33m - 8 ms[0m
[32m        returns true if coll can be converted into a seq[0m[34m - 8 ms[0m

    (reversible? coll)[33m - 11 ms[0m
[32m        returns true if coll is a reversible collection[0m[34m - 11 ms[0m

    (boolean x)[33m - 11 ms[0m
[32m        coerces x into a boolean value (false for nil and false, else true)[0m[34m - 11 ms[0m

    (not x)[33m - 4 ms[0m
[32m        returns the complement of (boolean x) (true for nil and false, else false)[0m[34m - 4 ms[0m

    (str x & ys)[33m - 7 ms[0m
[32m        concatenates the string values of each of its arguments[0m[34m - 7 ms[0m

    (println args)[33m - 2 ms[0m
[32m        prints the given args separated by a single space and followed by a newline[0m[34m - 2 ms[0m

    (keyword name)[33m - 3 ms[0m
[32m        returns a keyword with the given name (do not use : in the name, it will be added automatically)[0m[34m - 3 ms[0m

    (list items)[33m - 1 ms[0m
[32m        creates a new list containing the given items[0m[34m - 1 ms[0m

    (vector items)[33m - 1 ms[0m
[32m        creates a new vector containing the given items[0m[34m - 1 ms[0m

    (hash-map keyvals)[33m - 7 ms[0m
[32m        creates a new hash-map containing the given key-value pairs[0m[34m - 7 ms[0m

    (hash-set keys)[33m - 7 ms[0m
[32m        creates a new hash-set containing the given keys[0m[34m - 7 ms[0m

    (count coll)[33m - 7 ms[0m
[32m        returns the number of items the collection[0m[34m - 7 ms[0m

    (empty coll)[33m - 5 ms[0m
[32m        returns an empty collection of the same category as coll, or nil[0m[34m - 5 ms[0m

    (not-empty coll)[33m - 4 ms[0m
[32m        if coll is empty, returns nil, else coll[0m[34m - 4 ms[0m

    (get coll key not-found)[33m - 22 ms[0m
[32m        returns the value mapped to key if present, else not-found or nil[0m[34m - 22 ms[0m

    (aget obj key & keys)[33m - 6 ms[0m
[32m        returns the value corresponding to the given (nested) key in obj[0m[34m - 6 ms[0m

    (seq coll)[33m - 11 ms[0m
[32m        returns a seq on the collection, or nil if it is empty or nil[0m[34m - 11 ms[0m

    (first coll)[33m - 8 ms[0m
[32m        returns the first item in the collection, or nil if coll is nil[0m[34m - 8 ms[0m

    (rest coll)[33m - 8 ms[0m
[32m        returns all but the first item in the collection, or an empty seq if there are no more[0m[34m - 8 ms[0m

    (next coll)[33m - 9 ms[0m
[32m        returns all but the first item in the collection, or nil if there are no more[0m[34m - 9 ms[0m

    (last coll)[33m - 7 ms[0m
[32m        returns the last item in coll, in linear time[0m[34m - 7 ms[0m

    (interpose pos coll)[33m - 1 ms[0m
[32m        interpositions[0m[34m - 1 ms[0m

    (nth coll index not-found)[33m - 14 ms[0m
[32m        returns the value at index in coll, takes O(n) time on lists and seqs[0m[34m - 14 ms[0m

    (second coll)[33m - 3 ms[0m
[32m        is equivalent to (first (next x))[0m[34m - 3 ms[0m

    (ffirst coll)[33m - 2 ms[0m
[32m        is equivalent to (first (first x))[0m[34m - 2 ms[0m

    (nfirst coll)[33m - 266 ms[0m
[32m        is equivalent to (next (first x))[0m[34m - 264 ms[0m

    (fnext coll)[33m - 21 ms[0m
[32m        is equivalent to (first (next x))[0m[34m - 21 ms[0m

    (nnext coll)[33m - 4 ms[0m
[32m        is equivalent to (next (next x))[0m[34m - 4 ms[0m

    (nthnext coll n)[33m - 4 ms[0m
[32m        returns the nth next of coll, or (seq coll) when n is 0[0m[34m - 4 ms[0m

    (max-key k xs)[33m - 14 ms[0m
[32m        returns the x for which (k x), a number, is greatest[0m[34m - 14 ms[0m

    (min-key k xs)[33m - 15 ms[0m
[32m        returns the x for which (k x), a number, is least[0m[34m - 15 ms[0m

    (peek coll)[33m - 9 ms[0m
[32m        returns the first item of a list or the last item of a vector[0m[34m - 9 ms[0m

    (pop coll)[33m - 10 ms[0m
[32m        returns coll with (peek coll) removed, throws if coll is empty[0m[34m - 10 ms[0m

    (cons x seq)[33m - 8 ms[0m
[32m        returns a new seq of the form (x seq)[0m[34m - 8 ms[0m

    (conj coll & xs)[33m - 37 ms[0m
[32m        adds xs to coll in the most efficient way possible[0m[34m - 37 ms[0m

    (disj set), (disj set ks)[33m - 8 ms[0m
[32m        returns a new set with the keys removed[0m[34m - 8 ms[0m

    (into to from)[33m - 13 ms[0m
[32m        conjs all items from the second collection into the first[0m[34m - 13 ms[0m

    (concat seqs)[33m - 5 ms[0m
[32m        concatenates the given seqables into one sequence[0m[34m - 5 ms[0m

    (flatten coll)[33m - 5 ms[0m
[32m        converts an arbitrarily-nested collection into a flat sequence[0m[34m - 5 ms[0m

    (reverse coll)[33m - 10 ms[0m
[32m        reverses the collection[0m[34m - 10 ms[0m

    (assoc map & kvs)[33m - 8 ms[0m
[32m        adds / updates the given key-value pairs in the given map / vector[0m[34m - 8 ms[0m

    (dissoc map & keys)[33m - 11 ms[0m
[32m        removes entries corresponding to the given keys from map[0m[34m - 11 ms[0m

    (keys map)[33m - 9 ms[0m
[32m        returns a seq of the map's keys[0m[34m - 9 ms[0m

    (vals map)[33m - 8 ms[0m
[32m        returns a seq of the map's values[0m[34m - 8 ms[0m

    (key e)[33m - 5 ms[0m
[32m        returns the key of the given map entry[0m[34m - 5 ms[0m

    (val e)[33m - 6 ms[0m
[32m        returns the value of the given map entry[0m[34m - 6 ms[0m

    (find map key)[33m - 9 ms[0m
[32m        returns the map entry for a given key[0m[34m - 9 ms[0m

    (range), (range end), (range start end), (range start end step)[33m - 6 ms[0m
[32m        returns a seq of numbers in the range [start, end), where start defaults to 0, step to 1, and end to infinity[0m[34m - 6 ms[0m

    (to-array coll)[33m - 7 ms[0m
[32m        converts coll to a javascript array[0m[34m - 7 ms[0m

    (identity x)[33m - 6 ms[0m
[32m        returns its argument[0m[34m - 6 ms[0m

    (apply f x y z seq)[33m - 5 ms[0m
[32m        applies the given function with arguments x, y, z and the elements of seq[0m[34m - 5 ms[0m

    (map f colls)[33m - 292 ms[0m
[32m        applies f sequentially to every item in the given collections[0m[34m - 291 ms[0m

    (mapcat f colls)[33m - 14 ms[0m
[32m        applies concat to the result of applying map to f and colls[0m[34m - 14 ms[0m

    (filter pred coll)[33m - 31 ms[0m
[32m        returns a seq of the items in coll for which (pred item) is true[0m[34m - 31 ms[0m

    (remove pred coll)[33m - 26 ms[0m
[32m        returns a seq of the items in coll for which (pred item) is false[0m[34m - 26 ms[0m

    (reduce f coll), (reduce f val coll)[33m - 25 ms[0m
[32m        applies f to the first item in coll, then to that result and the second item, and so on[0m[34m - 25 ms[0m

    (reduce-kv f init coll)[33m - 14 ms[0m
[32m        works like reduce, but f is given 3 arguments: result, key, and value[0m[34m - 14 ms[0m

    (take n coll)[33m - 36 ms[0m
[32m        returns a seq of the first n items of coll, or all items if there are fewer than n[0m[34m - 36 ms[0m

    (drop n coll)[33m - 8 ms[0m
[32m        returns a seq of all but the first n items of coll, or an empty seq if there are fewer than n[0m[34m - 8 ms[0m

    (some pred coll)[33m - 6 ms[0m
[32m        returns the first logically true value of (pred x) for any x in coll, else nil[0m[34m - 6 ms[0m

    (every? pred coll)[33m - 20 ms[0m
[32m        returns true if (pred x) is true for every x in coll, else false[0m[34m - 20 ms[0m

    (sort coll), (sort cmp coll)[33m - 32 ms[0m
[32m        sorts the given collection, optionally using the given comparison function[0m[34m - 32 ms[0m

    (sort-by keyfn coll), (sort-by keyfn cmp coll)[33m - 32 ms[0m
[32m        sorts the given collection, optionally using the given comparison function[0m[34m - 32 ms[0m

    (partition n coll), (partition n step coll), (partition n step pad coll)[33m - 280 ms[0m
[32m        partitions coll into groups of n items each[0m[34m - 279 ms[0m

    (partition-by f coll)[33m - 21 ms[0m
[32m        partitions coll with a new group being started whenever the value returned by f changes[0m[34m - 21 ms[0m

    (group-by f coll)[33m - 22 ms[0m
[32m        returns a map of items grouped by the result of applying f to each element[0m[34m - 22 ms[0m

    (zipmap keys vals)[33m - 21 ms[0m
[32m        returns a map with the keys mapped to the corresponding vals[0m[34m - 21 ms[0m

    (iterate f x)[33m - 3 ms[0m
[32m        creates a lazy sequence of x, f(x), f(f(x)), etc. f must be free of side-effects[0m[34m - 3 ms[0m

    (constantly x)[33m - 2 ms[0m
[32m        returns a function which takes any number of arguments and returns x[0m[34m - 2 ms[0m

    (repeat x), (repeat n x)[33m - 7 ms[0m
[32m        returns a lazy sequence of (infinite, or n if given) xs[0m[34m - 7 ms[0m

    (repeatedly f), (repeatedly n f)[33m - 7 ms[0m
[32m        returns a lazy sequence of (infinite, or n if given) calls to the zero-arg function f[0m[34m - 7 ms[0m

    (comp fs)[33m - 5 ms[0m
[32m        returns the composition of the given functions (the returned function takes a variable number of arguments)[0m[34m - 5 ms[0m

    (partial f args)[33m - 13 ms[0m
[32m        partially applies f to the given args, returning a function that can be invoked with more args to f[0m[34m - 13 ms[0m

    (clj->js x)[33m - 4 ms[0m
[32m        recursively transforms maps to JS objects, collections to JS arrays, and keywords to JS strings[0m[34m - 4 ms[0m

    (js->clj x)[33m - 14 ms[0m
[32m        recursively transforms JS objects to maps, and JS arrays to vectors[0m[34m - 14 ms[0m

    (distinct coll)[33m - 14 ms[0m
[32m        returns the unique items of a list or vector[0m[34m - 14 ms[0m

    (rand-nth coll)[33m - 16 ms[0m
[32m        returns a random item from list or vector[0m[34m - 16 ms[0m

    (get-in coll keys not-found)[33m - 10 ms[0m
[32m        returns a value from a nested collection[0m[34m - 10 ms[0m

    (assoc-in coll keys val)[33m - 13 ms[0m
[32m        returns associated nested associative structure[0m[34m - 13 ms[0m

    (frequencies coll)[33m - 11 ms[0m
[32m        returns the map of distinct items in coll to their frequencies[0m[34m - 11 ms[0m

    (not-every? pred coll)[33m - 6 ms[0m
[32m        returns false if (pred x) is true for every x in coll, else true[0m[34m - 6 ms[0m

    (not-any? pred coll)[33m - 6 ms[0m
[32m        Returns false if (pred x) is logical true for any x in coll, else true.[0m[34m - 6 ms[0m

    (distinct? args...)[33m - 5 ms[0m
[32m        Returns true if no two of the arguments are =[0m[34m - 5 ms[0m

Closer parser[33m - 915 ms[0m

    Building blocks[33m - 34 ms[0m
[32m        parses empty programs[0m[34m - 4 ms[0m
[32m        parses commas as whitespace[0m[34m - 0 ms[0m
[32m        parses empty s-expressions[0m[34m - 1 ms[0m
[32m        parses comments[0m[34m - 2 ms[0m
[32m        parses identifiers[0m[34m - 1 ms[0m
[32m        parses JavaScript reserved words as identifiers after sanitization[0m[34m - 1 ms[0m
[32m        allows Clojure special form names to be used as identifiers[0m[34m - 2 ms[0m
[32m        parses integer, float, string, boolean, and nil literals[0m[34m - 3 ms[0m
[32m        parses keywords[0m[34m - 0 ms[0m
[32m        parses vector and list literals[0m[34m - 17 ms[0m
[32m        parses set and map literals[0m[34m - 2 ms[0m

    Functions[33m - 344 ms[0m
[32m        parses function calls with 0 arguments[0m[34m - 9 ms[0m
[32m        parses function calls with > 0 arguments[0m[34m - 1 ms[0m
[32m        parses anonymous function definitions[0m[34m - 1 ms[0m
[32m        parses calls to anonymous functions[0m[34m - 268 ms[0m
[32m        parses anonymous function literals[0m[34m - 14 ms[0m
[32m        parses named function definitions[0m[34m - 9 ms[0m
[32m        parses rest arguments[0m[34m - 35 ms[0m
[32m        parses collections and keywords in function position[0m[34m - 5 ms[0m

    TryCatch forms[33m - 0 ms[0m
[32m        throws when given empty try forms[0m[34m - 0 ms[0m

    Conditional forms[33m - 49 ms[0m
[32m        throws when given empty if forms[0m[34m - 1 ms[0m
[32m        parses if forms without else[0m[34m - 5 ms[0m
[32m        parses if-else forms[0m[34m - 1 ms[0m
[32m        parses if forms in function position[0m[34m - 14 ms[0m
[32m        throws when given if forms with > 3 forms in their body[0m[34m - 1 ms[0m
[32m        throws when given empty if-not forms[0m[34m - 0 ms[0m
[32m        parses if-not forms without else[0m[34m - 3 ms[0m
[32m        parses if-not forms with else[0m[34m - 1 ms[0m
[32m        parses if-not forms in function position[0m[34m - 17 ms[0m
[32m        throws when given if-not forms with > 3 forms in their body[0m[34m - 1 ms[0m
[32m        parses when forms[0m[34m - 2 ms[0m
[32m        parses when-not forms[0m[34m - 3 ms[0m

    Looping forms[33m - 77 ms[0m
[32m        parses loop + recur forms[0m[34m - 37 ms[0m
[32m        throws when given loop forms with an odd number of args in their bindings[0m[34m - 1 ms[0m
[32m        parses fn + recur forms[0m[34m - 14 ms[0m
[32m        parses dotimes forms[0m[34m - 9 ms[0m
[32m        throws when given dotimes forms with anything more or less than 1 binding[0m[34m - 0 ms[0m
[32m        parses doseq forms[0m[34m - 11 ms[0m
[32m        throws when given doseq forms with anything more or less than 1 binding[0m[34m - 1 ms[0m
[32m        parses while forms[0m[34m - 3 ms[0m

    Destructuring forms[33m - 356 ms[0m
[32m        parses vector destructuring forms[0m[34m - 58 ms[0m
[32m        parses map destructuring forms[0m[34m - 292 ms[0m
[32m        throws if a map is used to destructure rest args[0m[34m - 4 ms[0m

    Vars[33m - 30 ms[0m
[32m        parses unbound var definitions[0m[34m - 2 ms[0m
[32m        parses vars bound to literals[0m[34m - 2 ms[0m
[32m        throws when given def forms with > 2 arguments[0m[34m - 2 ms[0m
[32m        parses vars bound to expressions[0m[34m - 2 ms[0m
[32m        parses vars bound to fn forms[0m[34m - 14 ms[0m
[32m        parses var assignment forms like (set! var value)[0m[34m - 1 ms[0m
[32m        parses object property assignment forms like (set! (.prop obj) value)[0m[34m - 1 ms[0m
[32m        parses let forms with no bindings and no body[0m[34m - 1 ms[0m
[32m        parses let forms with non-empty bindings and non-empty body[0m[34m - 4 ms[0m
[32m        throws when given let forms with an odd number of args in their bindings[0m[34m - 1 ms[0m

    JavaScript interop[33m - 6 ms[0m
[32m        parses function-calling dot special forms[0m[34m - 1 ms[0m
[32m        parses dot special forms representing property access or a 0-argument function-call[0m[34m - 2 ms[0m
[32m        throws when given dot special forms with no object in the callee position[0m[34m - 1 ms[0m
[32m        parses new forms like (new Array 1 2 3)[0m[34m - 1 ms[0m
[32m        parses the macro-variant of new forms like (Array. 1 2 3)[0m[34m - 1 ms[0m

    Miscellaneous[33m - 7 ms[0m
[32m        parses empty do forms[0m[34m - 1 ms[0m
[32m        parses non-empty do forms[0m[34m - 3 ms[0m
[32m        parses logical expressions (and / or)[0m[34m - 2 ms[0m
[32m        throws when given illegal tokens[0m[34m - 1 ms[0m

    Loose mode[33m - 12 ms[0m
[32m        parses incomplete forms in loose mode[0m[34m - 3 ms[0m
[32m        parses forms with excess closing delimiters at the end[0m[34m - 5 ms[0m
[32m        parses forms with unmatched closing delimiters at the end[0m[34m - 2 ms[0m
[32m        returns an empty AST for forms with excess closing delimiters in between[0m[34m - 0 ms[0m
[32m        returns an empty AST for forms with unmatched closing delimiters in between[0m[34m - 1 ms[0m
[32m        never throws in loose mode, and always returns a valid AST, even when given illegal tokens[0m[34m - 0 ms[0m

Functional tests[33m - 474 ms[0m
[31m    identifiers can shadow core functions[0m[34m - 47 ms[0m
[31m    identifiers must never shadow special forms[0m[34m - 13 ms[0m
[31m    closures[0m[34m - 6 ms[0m
[31m    js interop - 'this' access[0m[34m - 10 ms[0m
[31m    loop + recur[0m[34m - 14 ms[0m
[31m    defn / fn + recur[0m[34m - 8 ms[0m
[31m    lexical scoping in dotimes and doseq forms[0m[34m - 23 ms[0m
[31m    let within loop[0m[34m - 11 ms[0m
[31m    destructuring forms[0m[34m - 303 ms[0m
[31m    averaging numbers[0m[34m - 4 ms[0m
[31m    quick sort[0m[34m - 17 ms[0m
[31m    fibonacci sequence[0m[34m - 3 ms[0m

Failures:

  1) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected null to equal 1[0m
   Stacktrace:
     Error: Expected null to equal 1
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:127:7)
  at Timer.listOnTimeout (timers.js:92:15)


  2) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected function to throw an exception.[0m
   Stacktrace:
     Error: Expected function to throw an exception.
  at throws (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:49:8)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:128:7)
  at Timer.listOnTimeout (timers.js:92:15)


  3) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected function to throw an exception.[0m
   Stacktrace:
     Error: Expected function to throw an exception.
  at throws (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:49:8)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:129:7)
  at Timer.listOnTimeout (timers.js:92:15)


  4) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected null to equal 2[0m
   Stacktrace:
     Error: Expected null to equal 2
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:130:7)
  at Timer.listOnTimeout (timers.js:92:15)


  5) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected function to throw an exception.[0m
   Stacktrace:
     Error: Expected function to throw an exception.
  at throws (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:49:8)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:131:7)
  at Timer.listOnTimeout (timers.js:92:15)


  6) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected null to equal 1[0m
   Stacktrace:
     Error: Expected null to equal 1
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:132:7)
  at Timer.listOnTimeout (timers.js:92:15)


  7) Functional tests identifiers can shadow core functions
   Message:
     [31mExpected function to throw an exception.[0m
   Stacktrace:
     Error: Expected function to throw an exception.
  at throws (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:49:8)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:133:14)
  at Timer.listOnTimeout (timers.js:92:15)


  8) Functional tests identifiers must never shadow special forms
   Message:
     [31mExpected null to equal [45 "b"][0m
   Stacktrace:
     Error: Expected null to equal [45 "b"]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:136:7)
  at Timer.listOnTimeout (timers.js:92:15)


  9) Functional tests identifiers must never shadow special forms
   Message:
     [31mExpected null to equal [45 "b"][0m
   Stacktrace:
     Error: Expected null to equal [45 "b"]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:137:14)
  at Timer.listOnTimeout (timers.js:92:15)


  10) Functional tests closures
   Message:
     [31mExpected null to equal 7[0m
   Stacktrace:
     Error: Expected null to equal 7
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:140:14)
  at Timer.listOnTimeout (timers.js:92:15)


  11) Functional tests js interop - 'this' access
   Message:
     [31mExpected null to equal [10 20][0m
   Stacktrace:
     Error: Expected null to equal [10 20]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:145:14)
  at Timer.listOnTimeout (timers.js:92:15)


  12) Functional tests loop + recur
   Message:
     [31mExpected null to equal [5 4 3 2 1][0m
   Stacktrace:
     Error: Expected null to equal [5 4 3 2 1]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:148:14)
  at Timer.listOnTimeout (timers.js:92:15)


  13) Functional tests defn / fn + recur
   Message:
     [31mExpected null to equal (1 2 6 24 120)[0m
   Stacktrace:
     Error: Expected null to equal (1 2 6 24 120)
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:151:14)
  at Timer.listOnTimeout (timers.js:92:15)


  14) Functional tests lexical scoping in dotimes and doseq forms
   Message:
     [31mExpected null to equal 10035[0m
   Stacktrace:
     Error: Expected null to equal 10035
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:154:7)
  at Timer.listOnTimeout (timers.js:92:15)


  15) Functional tests lexical scoping in dotimes and doseq forms
   Message:
     [31mExpected null to equal 10035[0m
   Stacktrace:
     Error: Expected null to equal 10035
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:155:14)
  at Timer.listOnTimeout (timers.js:92:15)


  16) Functional tests let within loop
   Message:
     [31mExpected null to equal 0[0m
   Stacktrace:
     Error: Expected null to equal 0
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:158:7)
  at Timer.listOnTimeout (timers.js:92:15)


  17) Functional tests let within loop
   Message:
     [31mExpected null to equal 0[0m
   Stacktrace:
     Error: Expected null to equal 0
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:159:14)
  at Timer.listOnTimeout (timers.js:92:15)


  18) Functional tests destructuring forms
   Message:
     [31mExpected null to equal {:args [1 2 (3 4) 5 6 7 8 (9)], :coll1 [1 2 3 4], :coll2 (7 8 9)}[0m
   Stacktrace:
     Error: Expected null to equal {:args [1 2 (3 4) 5 6 7 8 (9)], :coll1 [1 2 3 4], :coll2 (7 8 9)}
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:162:7)
  at Timer.listOnTimeout (timers.js:92:15)


  19) Functional tests destructuring forms
   Message:
     [31mExpected null to equal [1 true :c :e][0m
   Stacktrace:
     Error: Expected null to equal [1 true :c :e]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:166:7)
  at Timer.listOnTimeout (timers.js:92:15)


  20) Functional tests destructuring forms
   Message:
     [31mExpected null to equal ["hello" "w" "o"][0m
   Stacktrace:
     Error: Expected null to equal ["hello" "w" "o"]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:167:7)
  at Timer.listOnTimeout (timers.js:92:15)


  21) Functional tests destructuring forms
   Message:
     [31mExpected null to equal [1 "d" true][0m
   Stacktrace:
     Error: Expected null to equal [1 "d" true]
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:168:7)
  at Timer.listOnTimeout (timers.js:92:15)


  22) Functional tests destructuring forms
   Message:
     [31mExpected null to equal (4 3 2 1)[0m
   Stacktrace:
     Error: Expected null to equal (4 3 2 1)
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:169:14)
  at Timer.listOnTimeout (timers.js:92:15)


  23) Functional tests averaging numbers
   Message:
     [31mExpected null to equal 2.5[0m
   Stacktrace:
     Error: Expected null to equal 2.5
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:172:7)
  at Timer.listOnTimeout (timers.js:92:15)


  24) Functional tests averaging numbers
   Message:
     [31mExpected null to equal 2.5[0m
   Stacktrace:
     Error: Expected null to equal 2.5
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:173:14)
  at Timer.listOnTimeout (timers.js:92:15)


  25) Functional tests quick sort
   Message:
     [31mExpected null to equal (1 2 3 3 7 8 10)[0m
   Stacktrace:
     Error: Expected null to equal (1 2 3 3 7 8 10)
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:176:14)
  at Timer.listOnTimeout (timers.js:92:15)


  26) Functional tests fibonacci sequence
   Message:
     [31mExpected null to equal (0 1 1 2 3 5 8 13 21 34)[0m
   Stacktrace:
     Error: Expected null to equal (0 1 1 2 3 5 8 13 21 34)
  at eq (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:43:34)
  at [object Object].<anonymous> (/home/ubuntu/dev/clj/clojs/built/spec/functional-spec.js:179:14)
  at Timer.listOnTimeout (timers.js:92:15)


Finished in 4.304 seconds
[31m208 tests, 1018 assertions, 26 failures, 0 skipped
[0m

